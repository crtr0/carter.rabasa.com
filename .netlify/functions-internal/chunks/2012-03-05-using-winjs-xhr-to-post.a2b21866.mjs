import { k as createVNode, F as Fragment } from './astro.15e84d49.mjs';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'html-escaper';
import 'string-width';

const html = "<p>In the process of building a <a href=\"http://dev.windows.com\">Windows 8</a> <a href=\"http://twilio.com/api\">Twilio</a> app, I ran head first into an issue using <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/br229787.aspx\">WinJS.xhr</a> to send POST requests. The official documentation is pretty thin, so I thought I’d write-up how to accomplish this here.</p>\n<p>Using WinJS.xhr in general is quite nice. It abstracts away all the nonesense of <a href=\"https://developer.mozilla.org/en/XMLHttpRequest\">XMLHttpRequest</a> and provides a simple interface that uses <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh464930.aspx\">Promises</a> to handle the asynchronous responses. Here’s a simple example that uses the Twilio REST API to retrieve a list of SMS messages from a user’s account:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">WinJS.xhr({</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  user: accountSid, password: authKey,</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  url: \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/SMS/Messages.json\"</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">}).then(</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  function (success) {</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">    console.log(JSON.parse(success.responseText));</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  function (error) {</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">    console.log(JSON.parse(error.responseText));</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">);</span></span></code></pre>\n<p>Obviously, the example would be much shorter if I wasn’t using HTTP BASIC auth and had defined some named functions for the callback. But hey, pretty simple! Anyway, what if you want to do a POST? We’ll here’s what <em>won’t</em> work:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">WinJS.xhr({</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  type: \"post\", user: accountSid, password: authKey,</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  url: \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Calls.json\",</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  data: dataString</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">}).then(success, error);</span></span></code></pre>\n<p>You’ll notice I defined <code>type: \"post\"</code> to indicate that I want to POST. But, it turns out this is not enough. The answer to getting this to work is to manually set the response header. Here’s some code that <em>does</em> work:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">WinJS.xhr({</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  type: \"post\", user: accountSid, password: authKey,</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  url: \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Calls.json\",</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  headers: { \"Content-type\": \"application/x-www-form-urlencoded\" },</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  data: dataStr</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">    }).then(success, error);</span></span></code></pre>\n<p>That’s it. Just make sure to set:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">headers: { \"Content-type\": \"application/x-www-form-urlencoded\" }</span></span></code></pre>\n<p>..and you’re good to go!</p>";

				const frontmatter = {"title":"Using WinJS.xhr to POST","tags":["win8","winjs","twilio","rest"],"published":true,"pubDate":"Mar 03 2012"};
				const file = "/Users/crabasa/Code/carter.rabasa.com/src/content/blog/2012-03-05-using-winjs-xhr-to-post.md";
				const url = undefined;
				function rawContent() {
					return "\nIn the process of building a [Windows 8][] [Twilio][] app, I ran head first into an issue using [WinJS.xhr][] to send POST requests. The official documentation is pretty thin, so I thought I'd write-up how to accomplish this here.\n\nUsing WinJS.xhr in general is quite nice. It abstracts away all the nonesense of [XMLHttpRequest][] and provides a simple interface that uses [Promises][] to handle the asynchronous responses. Here's a simple example that uses the Twilio REST API to retrieve a list of SMS messages from a user's account:\n\n    WinJS.xhr({\n      user: accountSid, password: authKey,\n      url: \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/SMS/Messages.json\"\n    }).then(\n      function (success) {\n        console.log(JSON.parse(success.responseText));\n      },\n      function (error) {\n        console.log(JSON.parse(error.responseText));\n      }\n    );\n\nObviously, the example would be much shorter if I wasn't using HTTP BASIC auth and had defined some named functions for the callback. But hey, pretty simple! Anyway, what if you want to do a POST? We'll here's what _won't_ work:\n\n    WinJS.xhr({\n      type: \"post\", user: accountSid, password: authKey,\n      url: \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Calls.json\",\n      data: dataString\n    }).then(success, error);\n\nYou'll notice I defined `type: \"post\"` to indicate that I want to POST. But, it turns out this is not enough. The answer to getting this to work is to manually set the response header. Here's some code that _does_ work:\n\n    WinJS.xhr({\n      type: \"post\", user: accountSid, password: authKey,\n      url: \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Calls.json\",\n      headers: { \"Content-type\": \"application/x-www-form-urlencoded\" },\n      data: dataStr\n        }).then(success, error);\n\nThat's it. Just make sure to set:\n\n    headers: { \"Content-type\": \"application/x-www-form-urlencoded\" }\n\n..and you're good to go!\n\n[windows 8]: http://dev.windows.com\n[twilio]: http://twilio.com/api\n[winjs.xhr]: http://msdn.microsoft.com/en-us/library/windows/apps/br229787.aspx\n[xmlhttprequest]: https://developer.mozilla.org/en/XMLHttpRequest\n[promises]: http://msdn.microsoft.com/en-us/library/windows/apps/hh464930.aspx\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
